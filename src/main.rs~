use std::env;
use std::io::{Read,Write};
use std::fs::File;
use aes::Aes128;
use aes::cipher::{
    BlockCipher, BlockEncrypt, BlockDecrypt,
    KeyInit, generic_array::GenericArray,
};
use typenum::U16;
use std::io::Result;

const BLOCK_SIZE: usize = 16;


/*Objet that content
all tools to encrypt
and decrypt*/
struct EncryptDecryptObject {
    key: GenericArray<u8, U16>,
    block: GenericArray<u8, U16>,
    blocks:Vec<GenericArray<u8,U16>>,
}

/*methods*/
impl EncryptDecryptObject {

    fn new() -> Self {
	let key = GenericArray::from([0u8; 16]);
	let block = GenericArray::from([42u8; 16]);
	let blocks: Vec<GenericArray<u8, U16>> = Vec::new();

	EncryptDecryptObject {key, block, blocks}
    }
    
    /*function create to encrypt*/
   fn encrypt(&self) -> Result<Vec<Vec<u8>>> {

       // Initialize cipher
       let cipher = Aes128::new(&self.key);

       //we create a vec for allocate the cipher blocks
       let mut encrypted_blocks = Vec::new();

       //cipher each block of data
       for _block in &self.blocks {

	   let mut encrypted_data = vec![0u8; BLOCK_SIZE];
	   cipher.encrypt_block(GenericArray::from_mut_slice(&mut encrypted_data));
	   encrypted_blocks.push(encrypted_data);
       }
       Ok(encrypted_blocks)
    }

  /*  fn decrypt(&self) {

    }*/
}

/*main function*/
fn main() {
    
    let estructura = EncryptDecryptObject::new();

    match estructura.encrypt() {
	Ok(encrypted_blocks) => {
	    for block in &encrypted_blocks {
		println!("[ARCHIVE CRYPT]: Cipher Block: {:?}", block);
	    }
	} Err(err) => {
	    	println!("[ARCHIVE CRYPT]: ERROR in cipher process: {:?}", err);
	}
    }
    
    println!("[ARCHIVE CRYPT] --> key: {:?}",estructura.key);
    println!("[ARCHIVE CRYPT] --> block: {:?}",estructura.block);
    println!("[ARCHIVE CRYPT] --> blocks: {:?}",estructura.blocks);
}
